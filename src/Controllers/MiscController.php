<?php

declare(strict_types=1);

/*
 * BRIAPICollectionCopyLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BRIAPICollectionCopyLib\Controllers;

use BRIAPICollectionCopyLib\Exceptions\ApiException;
use BRIAPICollectionCopyLib\Models\Success;
use BRIAPICollectionCopyLib\Server;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use CoreInterfaces\Core\Request\RequestMethod;

class MiscController extends BaseController
{
    /**
     * First endpoint to hit before making request to other endpoint in BRIAPI
     *
     * @param string $grantType
     * @param string $clientId
     * @param string $clientSecret
     *
     * @return Success Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function getToken(string $grantType, string $clientId, string $clientSecret): Success
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/accesstoken')
            ->auth('global')
            ->parameters(
                QueryParam::init('grant_type', $grantType),
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('client_id', $clientId),
                FormParam::init('client_secret', $clientSecret)
            );

        $_resHandler = $this->responseHandler()->type(Success::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * API endpoint to get account information and balance
     *
     * @param string $bRISignature
     * @param string $bRITimestamp
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function accountInformation(string $bRISignature, string $bRITimestamp): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/888801000157508')
            ->server(Server::SERVER_2)
            ->auth('global')
            ->parameters(
                HeaderParam::init('BRI-Signature', $bRISignature),
                HeaderParam::init('BRI-Timestamp', $bRITimestamp)
            );

        $this->execute($_reqBuilder);
    }
}
