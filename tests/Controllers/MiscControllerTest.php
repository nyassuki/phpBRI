<?php

declare(strict_types=1);

/*
 * BRIAPICollectionCopyLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace BRIAPICollectionCopyLib\Tests\Controllers;

use BRIAPICollectionCopyLib\Controllers\MiscController;
use BRIAPICollectionCopyLib\Exceptions;
use Core\TestCase\BodyMatchers\KeysBodyMatcher;
use Core\TestCase\TestParam;

class MiscControllerTest extends BaseTestController
{
    /**
     * @var MiscController MiscController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getMiscController();
    }

    public function testGetToken()
    {
        // Parameters for the API call
        $grantType = 'client_credentials';
        $clientId = '{{id_key}}';
        $clientSecret = '{{secret_key}}';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->getToken($grantType, $clientId, $clientSecret);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', false];
        $headers['Date'] = ['Wed, 15 May 2019 03:33:32 GMT', false];
        $headers['Content-Length'] = ['542', false];
        $headers['Connection'] = ['keep-alive', false];
        $headers['Set-Cookie'] = ['TS01c44b75=011434184620b5fa39a0e94d0ef335803c5b5f58c6fa6235ec7545b1acba002af31ab4646c; Path=/', false];

        // Assert result with expected response
        $this->newTestCase($result)
            ->expectStatus(200)
            ->allowExtraHeaders()
            ->expectHeaders($headers)
            ->bodyMatcher(KeysBodyMatcher::init(TestParam::object(
                "{\r\n  \"refresh_token_expires_in\": \"0\",\r\n  \"api_product_list\": \"[inqu" .
                "iry-sandbox]\",\r\n  \"api_product_list_json\": [\r\n    \"inquiry-sandbox\"\r" .
                "\n  ],\r\n  \"organization_name\": \"bri\",\r\n  \"developer.email\": \"furkors" .
                "an.gantheng@xyz.com\",\r\n  \"token_type\": \"BearerToken\",\r\n  \"issued_at\"" .
                ": \"1557891212144\",\r\n  \"client_id\": \"8E20dpP7KtakFkShw5tQHOFf7FFAU01o\"," .
                "\r\n  \"access_token\": \"R04XSUbnm1GXNmDiXx9ysWMpFWBr\",\r\n  \"application_na" .
                "me\": \"317d0b2f-6536-4cac-a5f0-3bc9908815b3\",\r\n  \"scope\": \"\",\r\n  \"ex" .
                "pires_in\": \"179999\",\r\n  \"refresh_count\": \"0\",\r\n  \"status\": \"appro" .
                "ved\"\r\n}"
            )))
            ->assert();
    }

    public function testAccountInformation()
    {
        // Parameters for the API call
        $bRISignature = '{{signature}}';
        $bRITimestamp = '{{timestamp}}';

        // Perform API call
        try {
            self::$controller->accountInformation($bRISignature, $bRITimestamp);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }
}
